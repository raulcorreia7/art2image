#include "palette.hpp"
#include <fstream>
#include <iostream>
#include <cstring>

namespace art2img {

Palette::Palette() {
    load_duke3d_default();
}

bool Palette::load_from_file(const std::string& filename) {
    std::ifstream file(filename, std::ios::binary);
    if (!file.is_open()) {
        std::cerr << "Warning: Cannot open palette file '" << filename << "'" << std::endl;
        return false;
    }
    
    data_.resize(SIZE);
    if (!file.read(reinterpret_cast<char*>(data_.data()), SIZE)) {
        std::cerr << "Warning: Cannot read palette from '" << filename << "'" << std::endl;
        data_.clear();
        return false;
    }
    
    convert_to_tga_format();
    return true;
}

bool Palette::load_from_memory(const uint8_t* data, size_t size) {
    if (!data || size < SIZE) {
        std::cerr << "Warning: Invalid data or insufficient size for palette" << std::endl;
        return false;
    }
    
    data_.assign(data, data + SIZE);
    convert_to_tga_format();
    return true;
}

void Palette::load_duke3d_default() {
    // Duke Nukem 3D palette extracted from PALETTE.DAT and scaled 0-63 to 0-255
    static const uint8_t duke3d_palette[SIZE] = {
          0,   0,   0,   4,   4,   4,  16,  12,  16,  24,  24,  24,
         36,  32,  36,  44,  40,  44,  56,  52,  52,  64,  60,  60,
         76,  72,  72,  88,  80,  80,  96,  92,  92, 104, 100, 100,
        112, 108, 108, 120, 116, 116, 128, 124, 124, 136, 132, 132,
        144, 140, 140, 152, 148, 148, 160, 156, 156, 168, 164, 164,
        176, 172, 172, 188, 184, 184, 196, 192, 192, 204, 200, 200,
        212, 208, 208, 220, 216, 216, 228, 224, 224, 236, 232, 232,
        244, 240, 240, 252, 248, 248,  96,  80,  80, 144, 112, 112,
        192, 160, 160, 240, 208, 208, 252, 220, 220,  80,  64,  64,
        112,  96,  96, 144, 128, 128, 176, 160, 160, 208, 192, 192,
        224, 212, 212, 240, 228, 228, 252, 244, 244,  68,  80, 148,
        104, 120, 172, 128, 144, 184, 152, 168, 196, 176, 184, 204,
        200, 212, 212, 224, 224, 224, 252, 252, 252, 252, 220, 220,
        252, 220, 220, 252, 220, 220, 252, 220, 220, 252, 220, 220,
        252, 220, 220, 252, 220, 220, 252, 220, 220, 252, 220, 220,
        252, 220, 220, 252, 220, 220, 252, 220, 220, 252, 220, 220,
         12,  12,  12,  20,  20,  20,  28,  28,  28,  36,  36,  36,
         44,  44,  44,  52,  52,  52,  60,  60,  60,  68,  68,  68,
         76,  76,  76,  84,  84,  84,  92,  92,  92, 100, 100, 100,
        108, 108, 108, 116, 116, 116, 124, 124, 124, 132, 132, 132,
        140, 140, 140, 148, 148, 148, 156, 156, 156, 164, 164, 164,
        172, 172, 172, 180, 180, 180, 188, 188, 188, 196, 196, 196,
        204, 204, 204, 212, 212, 212, 220, 220, 220, 228, 228, 228,
        236, 236, 236, 244, 244, 244, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
        252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252
    };
    
    data_.assign(duke3d_palette, duke3d_palette + SIZE);
    convert_to_tga_format();
}

void Palette::load_blood_default() {
    // Blood palette from original art2tga.c
    static const uint8_t blood_palette[SIZE] = {
        0,   0,   0,   8,   8,   8,  16,  16,  16,  24,  24,  24,
        32,  32,  32,  40,  40,  40,  48,  48,  48,  56,  56,  56,
        64,  64,  64,  72,  72,  72,  80,  80,  80,  88,  88,  88,
        96,  96,  96, 104, 104, 104, 112, 112, 112, 120, 120, 120,
        128, 128, 128, 136, 136, 136, 144, 144, 144, 152, 152, 152,
        160, 160, 160, 168, 168, 168, 176, 176, 176, 188, 188, 188,
        196, 196, 196, 204, 204, 204, 212, 212, 212, 220, 220, 220,
        228, 228, 228, 236, 236, 236, 244, 244, 244, 252, 252, 252,
        24,  20,  20,  36,  28,  28,  48,  40,  40,  60,  52,  52,
        72,  60,  60,  84,  72,  72,  96,  84,  84, 112,  96,  96,
        124, 104, 104, 136, 116, 116, 148, 128, 128, 160, 136, 136,
        172, 148, 148, 184, 160, 160, 200, 172, 172, 252, 220, 220,
        0,  12,  36,   0,  16,  48,   4,  24,  56,   4,  32,  68,
        12,  40,  80,  20,  52,  92,  28,  60, 104,  36,  72, 116,
        48,  84, 128,  60,  96, 140,  76, 108, 152,  88, 124, 164,
        104, 136, 176, 120, 152, 188, 140, 168, 200, 180, 208, 240,
        20,  20,  44,  24,  28,  56,  32,  36,  72,  40,  48,  84,
        44,  60,  96,  52,  72, 112,  56,  84, 124,  64, 100, 140,
        72, 116, 152,  76, 132, 168,  80, 144, 180,  88, 156, 192,
        92, 172,  208, 100, 184, 220, 104, 200, 232, 112, 220, 252,
        12,  20,  56,  16,  24,  64,  20,  32,  76,  28,  40,  84,
        36,  44,  92,  44,  52, 104,  52,  64, 112,  60,  72, 124,
        72,  80, 132,  80,  92, 144,  92, 104, 152, 104, 112, 164,
        116, 128, 172, 132, 140, 184, 144, 152, 196, 184, 192, 240,
        16,   8,   8,  24,  12,  12,  32,  16,  16,  40,  24,  20,
        48,  28,  24,  56,  32,  32,  64,  36,  36,  76,  44,  40,
        84,  48,  44,  92,  52,  48, 100,  60,  52, 108,  64,  56,
        116,  68,  60, 124,  76,  64, 132,  80,  68, 140,  88,  72,
        148,  96,  80, 156, 108,  88, 168, 116,  96, 176, 128, 104,
        184, 136, 116, 192, 148, 124, 200, 160, 132, 212, 172, 144,
        156,   0,   0, 180,  40,  12, 204,  88,  32, 212, 112,  40,
        224, 132,  48, 232, 152,  56, 240, 172,  68, 252, 196,  80,
        8,  20,  48,   8,  24,  60,   8,  28,  72,  12,  32,  84,
        12,  32,  96,  12,  36, 108,  12,  36, 120,  12,  40, 132,
        8,  40, 144,   8,  40, 156,   8,  40, 168,   4,  36, 180,
        4,  36, 192,   0,  32, 208,   0,  32, 220,   0,  36, 252,
        0,   0,  48,   0,   0,  72,   0,   0,  96,   0,   0, 124,
        0,   0, 148,   0,   0, 172,   0,   0, 192,   0,  12, 204,
        0,   0, 236,   0,  80, 252,   0, 112, 252,   0, 152, 252,
        0, 180, 252,   0, 216, 252,   0, 252, 252, 104, 252, 252,
        20,  24,  12,  28,  32,  16,  36,  44,  24,  44,  52,  32,
        52,  64,  44,  60,  76,  52,  72,  84,  60,  80,  96,  72,
        88, 104,  84, 100, 116,  96, 112, 128, 104, 120, 136, 120,
        136, 148, 132, 148, 156, 144, 160, 168, 160, 208, 212, 208,
        4,  24,  80,   4,  36, 108,   4,  56, 140,   4,  76, 168,
        4,  96, 200,   4, 124, 216,   0, 140, 232,   0, 144, 252,
        0,  28,   0,   0,  40,   0,   4,  56,   4,  16,  72,  16,
        28,  88,  28,  40, 104,  40,  60, 120,  60,  80, 136,  80,
        0,  20,  36,   0,  28,  44,   4,  36,  56,   4,  44,  68,
        8,  52,  80,  16,  60,  88,  24,  68, 100,  32,  80, 112,
        40,  88, 120,  52, 100, 132,  60, 108, 144,  72, 120, 156,
        88, 132, 164, 100, 144, 176, 116, 156, 188, 132, 172, 200,
        4,  76, 180,  16,  84, 192,  32,  92, 208,  48, 104, 224,
        56, 116, 228,  64, 132, 232,  72, 144, 236,  80, 160, 240,
        92, 176, 240, 100, 184, 240, 116, 200, 244, 124, 212, 244,
        140, 216, 248, 148, 228, 248, 164, 232, 248, 172, 240, 252,
        28,  28, 140,  40,  44, 148,  56,  60, 160,  72,  80, 172,
        92, 100, 184, 108, 120, 196, 132, 144, 208, 156, 168, 220,
        8,   8,  20,  12,  12,  32,  20,  20,  48,  24,  28,  60,
        28,  36,  76,  36,  44,  88,  40,  56, 104,  44,  64, 116,
        48,  76, 132,  52,  80, 136,  56,  88, 140,  60,  92, 148,
        64, 100, 152,  72, 108, 156,  76, 112, 160,  80, 120, 168,
        88, 128, 172,  92, 136, 176, 100, 140, 184, 104, 148, 188,
        112, 156, 192, 120, 164, 200, 160, 200, 228, 160,   0, 188
    };
    
    data_.assign(blood_palette, blood_palette + SIZE);
    convert_to_tga_format();
}

void Palette::convert_to_tga_format() {
    if (data_.size() != SIZE) {
        return;
    }
    
    // Convert from RGB to BGR and scale values
    for (size_t i = 0; i < SIZE; i += 3) {
        uint8_t red = data_[i];
        uint8_t green = data_[i + 1];
        uint8_t blue = data_[i + 2];
        
        // Scale and swap for TGA format
        data_[i] = static_cast<uint8_t>(blue << 2);     // Blue component
        data_[i + 1] = static_cast<uint8_t>(green << 2); // Green component
        data_[i + 2] = static_cast<uint8_t>(red << 2);   // Red component
    }
}

uint8_t Palette::get_red(size_t index) const {
    if (index >= 256 || data_.size() != SIZE) {
        return 0;
    }
    return data_[index * 3 + 2] >> 2; // Reverse TGA conversion
}

uint8_t Palette::get_green(size_t index) const {
    if (index >= 256 || data_.size() != SIZE) {
        return 0;
    }
    return data_[index * 3 + 1] >> 2;
}

uint8_t Palette::get_blue(size_t index) const {
    if (index >= 256 || data_.size() != SIZE) {
        return 0;
    }
    return data_[index * 3] >> 2;
}

} // namespace art2img